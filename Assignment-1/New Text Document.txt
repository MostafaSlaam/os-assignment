int execute_command(char *command_string)
{
	// Split the command string into whitespace-separated arguments
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
	if (number_of_arguments == 0)
		return 0;

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
		{
			command_found = 1;
			break;
		}
	}

	if(command_found)
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
		return return_value;
	}
	else
	{
		char* temp=arguments[0];
		int l=strlen(temp);
		int k;
		
		int cmd_num=-1;
		int i;
		for(i = 0; i < NUM_OF_COMMANDS; i++)
		{
			char*temp2=commands[i].name;
			int flag=1;
		for(k=0;k<l;)
		{
			if(temp[k]==temp2[k])
			{
				k++;
			}
			else
			{
				flag=0;
				break;
			}
		//	if(k==l-1&&flag==1)
		//	{cmd_num=i;}
		}
		if(flag==1)
		{
			cmd_num=i;
			break;
		}
		}
		if(cmd_num!=-1)
		{int return_value;
		return_value = commands[cmd_num].function_to_execute(number_of_arguments, arguments);
		return return_value;}
		else
		{
		//if not found, then it's unknown command
		cprintf("Unknown command '%s'\n", arguments[0]);
		return 0;
	         }
	}
}